module SingleSource
  class Generator < Jekyll::Generator
    priority :highest
    def generate(site)
      Dir.glob('app/_data/docs_nav_*.yml').each do|f|
        data = SafeYAML.load(File.read(f))
        next unless data.is_a?(Hash) && data['generate']
        createPages(data['items'], site, data['product'], data['version'])
      end
    end

    def createPages(data, site, product, version)
      data.each do |v,k|

        # Handle when it's the root page.
        # We always want to generate this, even if
        # it's an absolute_url
        if v['url'] === "/#{product}/" && !v['src']
          v['src'] = 'index'
        end

        # Absolute URLs are expected to be generated by
        # another method, unless there's a 'src' set
        if (v['url'] && !v['absolute_url']) || v['src']
          # Is it an in-page link? If so, skip it
          next if v['url'] && v['url'].include?("/#")
          site.pages << SingleSourcePage.new(site, v['src'], v['url'], product, version)
        end

        # If there are any children, generate those too
        if v['items']
          createPages(v['items'], site, product, version)
        end
      end
    end
  end

  class SingleSourcePage < Jekyll::Page
    def initialize(site, src, dest, product, version)
      # If there's no 'src' key provided, assume it's the same as the url
      src = dest unless src
      if src[0] === "/"
        src = src[1..-1]
      end

      # Remove trailing slashes
      src.chomp!("/")

      process("index.md")

      outputPath = src
      outputPath = "" if src == "index"

      @site = site
      @base = site.source
      @dir = "#{product}/#{version}/#{outputPath}"

      @path = src
       
      filename = File.basename(src)
      file = "src/#{product}/#{src}.md"
      file = "src/#{product}/#{src}/index.md" unless File.exists?(file)
      content = File.read(file)

      # Load content + frontmatter from the file
      if content =~ Jekyll::Document::YAML_FRONT_MATTER_REGEXP
        @content = Regexp.last_match.post_match
        @data = SafeYAML.load(Regexp.last_match(1))
      end

      @data['edit_link'] = file;

      # Set the layout
      @data['layout'] = 'docs-v2' unless self.data['layout']
    end
  end
end

# Replace double line breaks when using if_version when
# combined with <pre> blocks. This is usually in code samples
Jekyll::Hooks.register :pages, :pre_render do |page|
  page.content = page.content.gsub(/\n(\s*{% if_version)/, '\1')
end